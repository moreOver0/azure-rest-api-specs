{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Anomaly Detector Client",
    "description": "The Anomaly Detector API detects anomalies automatically in time series data. It supports two kinds of mode, one is for stateless using, another is for stateful using. In stateless mode, there are three functionalities. Entire Detect is for detecting the whole series with model trained by the time series, Last Detect is detecting last point with model trained by points before. ChangePoint Detect is for detecting trend changes in time series. In stateful mode, user can store time series, the stored time series will be used for detection anomalies. Under this mode, user can still use the above three functionalities by only giving a time range without preparing time series in client side. Besides the above three functionalities, stateful model also provide group based detection and labeling service. By leveraging labeling service user can provide labels for each detection result, these labels will be used for retuning or regenerating detection models. Inconsistency detection is a kind of group based detection, this detection will find inconsistency ones in a set of time series. By using anomaly detector service, business customers can discover incidents and establish a logic flow for root cause analysis."
    },
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}/anomalydetector/v1.0",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  },
  "paths": {
    "/timeseries/entire/detect": {
      "post": {
        "summary": "Detect anomalies for the entire series in batch.",
        "description": "This operation generates a model using an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is an anomaly. The entire detection can give user an overall status of the time series.",
        "operationId": "EntireDetect",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Time series points and period if needed. Advanced model parameters can also be set in the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/EntireDetectResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Find anomalies for the entire series in batch example": {
            "$ref": "./examples/EntireDetect.json"
          }
        }
      }
    },
    "/timeseries/last/detect": {
      "post": {
        "summary": "Detect anomaly status of the latest point in time series.",
        "description": "This operation generates a model using points before the latest one. With this method, only historical points are used to determine whether the target point is an anomaly. The latest point detecting operation matches the scenario of real-time monitoring of business metrics.",
        "operationId": "LastDetect",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Time series points and period if needed. Advanced model parameters can also be set in the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/LastDetectResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect anomaly status of the latest point in time series example": {
            "$ref": "./examples/LastDetect.json"
          }
        }
      }
    },
    "/timeseries/changepoint/detect": {
      "post": {
        "summary": "Detect change point for the entire series",
        "description": "Evaluate change point score of every series point",
        "operationId": "ChangePointDetect",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Time series points and granularity is needed. Advanced model parameters can also be set in the request if needed.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePointDetectRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/ChangePointDetectResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect change point example": {
            "$ref": "./examples/ChangePointDetect.json"
          }
        }
      }
    },
    "/timeseries/{timeSeriesId}": {
      "get": {
        "summary": "Get meta information of the specified timeseries.",
        "description": "corresponds to create series, get series meta with timeseries id.",
        "operationId": "TimeSeries_Get",
        "parameters": [
          {
            "$ref": "#/parameters/timeSeriesId"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/TimeSeries"
            }
          },
          "404": {
            "description": "Specified time series does not exist.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get information of a time series example": {
            "$ref": "./examples/TimeSeriesGet.json"
          }
        }
      },
      "put": {
        "summary": "Creat a timeseries.",
        "description": "Create series, user need to provide timeSeriesId and granularity, if the series has dimension or name, description can be provided through the interface.",
        "operationId": "TimeSeries_Create",
        "parameters": [
          {
            "$ref": "#/parameters/timeSeriesId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeSeriesCreateRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation. If the time series already exists will not create it again."
          },
          "201": {
            "description": "New time series has been created successfully."
          },
          "409": {
            "description": "Specified time series already exists and the client offers different property for the same series.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create a new time series example": {
            "$ref": "./examples/TimeSeriesCreate.json"
          }
        }
      },
      "delete": {
        "summary": "Delete the specified timeseries.",
        "description": "Delete the specified timeseries.",
        "operationId": "TimeSeries_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/timeSeriesId"
          }
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Specified time series has been deleted from the server side."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete a time series example": {
            "$ref": "./examples/TimeSeriesDelete.json"
          }
        }
      }
    },
    "/timeseries": {
      "get": {
        "summary": "List time series of each unique user.",
        "description": "List time series of each unique user.",
        "operationId": "TimeSeries_List",
        "parameters": [
          {
            "$ref": "#/parameters/next"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/TimeSeriesList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get information of a time series example": {
            "$ref": "./examples/TimeSeriesList.json"
          }
        }
      }
    },
    "/timeseries/{timeSeriesId}/write": {
      "post": {
        "description": "Insert or replace timeseries data for specified timeSeriesId. Note that this interface only stores data and do not detect these data.",
        "operationId": "TimeSeries_Write",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/timeSeriesId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body for writing timeseries.",
            "required": true,
            "schema": {
              "type": "array",
              "description": "Time series data points.",
              "items": {
                "$ref": "#/definitions/Point"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful call returns an empty response body."
          },
          "404": {
            "description": "The specified time series does not exist in server side.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Write Timeseries example": {
            "$ref": "./examples/TimeSeriesWrite.json"
          }
        }
      }
    },
    "/timeseries/{timeSeriesId}/detect": {
      "post": {
        "summary": "Detect anomaly status on a given timestamp",
        "description": "This operation can be used in streaming monitoring scenario, when user would like to monitor a time series, the user only need to provide a time range, last detect API will check where last detection ends and will return detection results between last detection and the end time",
        "operationId": "TimeSeries_DetectOnTimestamp",
        "parameters": [
          {
            "$ref": "#/parameters/timeSeriesId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Timestamp is required in the request. Advanced model parameters (period, sensitivity, maxAnomalyRatio) can also be set in the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnomalyDetectOnTimestampRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/AnomalyDetectOnTimestampResponse"
            }
          },
          "404": {
            "description": "The specified time series does not exist in server side.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect anomaly status of a point example": {
            "$ref": "./examples/DetectOnTimestamp.json"
          }
        }
      }
    },
    "/timeseries/{timeSeriesId}/changepoint/detect": {
      "post": {
        "summary": "Detect change point for the interval series",
        "description": "Evaluate change point score of every series point between start and end.",
        "operationId": "TimeSeries_ChangePointDetectOnTimestamp",
        "parameters": [
          {
            "$ref": "#/parameters/timeSeriesId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Timestamp is needed. Advanced model parameters can also be set in the request if needed.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePointDetectOnTimestampRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/ChangePointDetectOnTimestampResponse"
            }
          },
          "404": {
            "description": "The specified time series does not exist in server side.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "ChangePoint example": {
            "$ref": "./examples/ChangePointDetectOnTimestamp.json"
          }
        }
      }
    },
    "/timeseries/{timeSeriesId}/label": {
      "post": {
        "summary": "Label API is used for users to label detection status of a certain time stamp of a time series",
        "description": "This operation is used for users to label Anomaly or ChangePoint states of a certain time stamp, these label will be used for regenerate detection model",
        "operationId": "TimeSeries_Label",
        "parameters": [
          {
            "$ref": "#/parameters/timeSeriesId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "In Label request, user can set Anomaly|ChangePoint state (true, false, unknown) for a time range",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LabelRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "404": {
            "description": "The specified time series does not exist in server side.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Label example": {
            "$ref": "./examples/Label.json"
          }
        }
      }
    },
    "/timeseries/{timeSeriesId}/query": {
      "post": {
        "description": "Query timeseries with required field in each timestamp.",
        "operationId": "TimeSeries_Query",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/timeSeriesId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body for querying timeseries.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeSeriesQueryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/TimeSeriesQueryResponse"
            }
          },
          "404": {
            "description": "The specified time series does not exist in server side.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Query Timeseries example": {
            "$ref": "./examples/TimeSeriesQuery.json"
          }
        }
      }
    },
    "/timeseries/inconsistency/detect": {
      "post": {
        "summary": "Detect inconsistent time series from a group of similar time series.",
        "description": "This operation helps detect the inconsistent series among a group series with similar trend.",
        "operationId": "TimeSeries_InconsistencyDetect",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Timestamp is necessary, and a parameter called epsilon is needed to tune the result. Epsilon should be within 0 and 1. A list of time series ids need to be provided to the service.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InconsistencyDetectRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/Inconsistency"
            }
          },
          "404": {
            "description": "The specified time series does not exist in server side.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Inconsistency detect example": {
            "$ref": "./examples/InconsistencyDetect.json"
          }
        }
      }
    }
  },
  "definitions": {
    "APIError": {
      "type": "object",
      "description": "Error information returned by the API.",
      "properties": {
        "code": {
          "description": "The error code.",
          "enum": [
            "InvalidCustomInterval",
            "BadArgument",
            "InvalidGranularity",
            "InvalidPeriod",
            "InvalidModelArgument",
            "InvalidSeries",
            "InvalidJsonFormat",
            "ConflictSeries",
            "RequiredGranularity",
            "RequiredSeries",
            "StorageException"
          ],
          "x-ms-enum": {
            "name": "AnomalyDetectorErrorCodes",
            "modelAsString": true
          }
        },
        "message": {
          "description": "A message explaining the error reported by the service.",
          "type": "string"
        }
      }
    },
    "Granularity": {
      "type": "string",
      "description": "Can only be one of yearly, monthly, weekly, daily, hourly or minutely. Granularity is used for verify whether input series is valid.",
      "x-nullable": false,
      "x-ms-enum": {
        "name": "Granularity",
        "modelAsString": false
      },
      "enum": [
        "yearly",
        "monthly",
        "weekly",
        "daily",
        "hourly",
        "minutely"
      ]
    },
    "CustomInterval": {
      "type": "integer",
      "format": "int32",
      "x-nullable": false,
      "description": "Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}."
    },
    "Request": {
      "type": "object",
      "required": [
        "granularity",
        "series"
      ],
      "properties": {
        "series": {
          "type": "array",
          "description": "Time series data points. Points should be sorted by timestamp in ascending order to match the anomaly detection result. If the data is not sorted correctly or there is duplicated timestamp, the API will not work. In such case, an error message will be returned.",
          "items": {
            "$ref": "#/definitions/Point"
          }
        },
        "granularity": {
          "$ref": "#/definitions/Granularity"
        },
        "customInterval": {
          "description": "Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}.",
          "$ref": "#/definitions/CustomInterval"
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically."
        },
        "maxAnomalyRatio": {
          "type": "number",
          "format": "float",
          "description": "Optional argument, advanced model parameter, max anomaly ratio in a time series."
        },
        "sensitivity": {
          "type": "integer",
          "format": "int32",
          "description": "Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted."
        }
      }
    },
    "Point": {
      "type": "object",
      "required": [
        "timestamp",
        "value"
      ],
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of a data point (ISO8601 format)."
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "The measurement of that point, should be float."
        }
      }
    },
    "EntireDetectResponse": {
      "type": "object",
      "required": [
        "expectedValues",
        "isAnomaly",
        "isNegativeAnomaly",
        "isPositiveAnomaly",
        "lowerMargins",
        "period",
        "upperMargins"
      ],
      "properties": {
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "Frequency extracted from the series, zero means no recurrent pattern has been found."
        },
        "expectedValues": {
          "type": "array",
          "description": "ExpectedValues contain expected value for each input point. The index of the array is consistent with the input series.",
          "items": {
            "type": "number",
            "format": "float",
            "x-nullable": false
          }
        },
        "upperMargins": {
          "type": "array",
          "description": "UpperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series.",
          "items": {
            "type": "number",
            "format": "float",
            "x-nullable": false
          }
        },
        "lowerMargins": {
          "type": "array",
          "description": "LowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series.",
          "items": {
            "type": "number",
            "format": "float",
            "x-nullable": false
          }
        },
        "isAnomaly": {
          "type": "array",
          "description": "IsAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.",
          "items": {
            "type": "boolean",
            "x-nullable": false
          }
        },
        "isNegativeAnomaly": {
          "type": "array",
          "description": "IsNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series.",
          "items": {
            "type": "boolean",
            "x-nullable": false
          }
        },
        "isPositiveAnomaly": {
          "type": "array",
          "description": "IsPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series.",
          "items": {
            "type": "boolean",
            "x-nullable": false
          }
        }
      }
    },
    "LastDetectResponse": {
      "type": "object",
      "required": [
        "expectedValue",
        "isAnomaly",
        "isNegativeAnomaly",
        "isPositiveAnomaly",
        "lowerMargin",
        "period",
        "upperMargin",
        "suggestedWindow"
      ],
      "properties": {
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "Frequency extracted from the series, zero means no recurrent pattern has been found."
        },
        "suggestedWindow": {
          "type": "integer",
          "format": "int32",
          "description": "Suggested input series points needed for detecting the latest point."
        },
        "expectedValue": {
          "type": "number",
          "format": "float",
          "description": "Expected value of the latest point."
        },
        "upperMargin": {
          "type": "number",
          "format": "float",
          "description": "Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting marginScale value, anomaly status of latest point can be changed."
        },
        "lowerMargin": {
          "type": "number",
          "format": "float",
          "description": "Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. "
        },
        "isAnomaly": {
          "type": "boolean",
          "description": "Anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction."
        },
        "isNegativeAnomaly": {
          "type": "boolean",
          "description": "Anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one."
        },
        "isPositiveAnomaly": {
          "type": "boolean",
          "description": "Anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one."
        }
      }
    },
    "SeriesId": {
      "type": "string",
      "description": "Unique id for time series.",
      "x-nullable": false
    },
    "Dictionary": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "TimeSeries": {
      "type": "object",
      "required": [
        "seriesId",
        "granularity"
      ],
      "properties": {
        "seriesId": {
          "description": "Unique id for time series.",
          "$ref": "#/definitions/SeriesId"
        },
        "granularity": {
          "$ref": "#/definitions/Granularity",
          "description": "Can only be one of yearly, monthly, weekly, daily, hourly or minutely. Granularity is used for verify whether input series is valid."
        },
        "customInterval": {
          "description": "Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}.",
          "$ref": "#/definitions/CustomInterval"
        },
        "retentionDurationInHours": {
          "type": "integer",
          "format": "int32",
          "description": "Hours that the data is kept."
        }
      }
    },
    "TimeSeriesCreateRequest": {
      "type": "object",
      "required": [
        "granularity"
      ],
      "properties": {
        "granularity": {
          "$ref": "#/definitions/Granularity",
          "description": "Can only be one of yearly, monthly, weekly, daily, hourly or minutely. Granularity is used for verify whether input series is valid."
        },
        "customInterval": {
          "description": "Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}.",
          "$ref": "#/definitions/CustomInterval"
        },
        "retentionDurationInHours": {
          "type": "integer",
          "format": "int32",
          "description": "Hours that the data is kept."
        }
      }
    },
    "TimeSeriesList": {
      "required": [
        "series"
      ],
      "properties": {
        "series": {
          "type": "array",
          "description": "Array of TimeSeries objects.",
          "items": {
            "$ref": "#/definitions/TimeSeries"
          }
        },
        "nextLink": {
          "type": "string"
        }
      }
    },
    "InconsistencyDetectRequest": {
      "type": "object",
      "required": [
        "timestamp",
        "timeSeriesIds"
      ],
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Inconsistency detect timestamp."
        },
        "epsilon": {
          "type": "number",
          "format": "float",
          "description": "Parameter to be tuned to get inconsistency."
        },
        "timeSeriesIds": {
          "type": "array",
          "description": "IDs of time series need to be detected.",
          "items": {
            "description": "Unique id for time series.",
            "$ref": "#/definitions/SeriesId"
          }
        }
      }
    },
    "Inconsistency": {
      "type": "object",
      "required": [
        "inconsistentSeriesIds",
        "confidenceScores",
        "principleTrend"
      ],
      "properties": {
        "inconsistentSeriesIds": {
          "type": "array",
          "description": "IDs of inconsistent series in the time series group.",
          "items": {
            "description": "Unique id for time series.",
            "$ref": "#/definitions/SeriesId"
          }
        },
        "confidenceScores": {
          "type": "array",
          "description": "Scores of inconsistent series in the time series group.",
          "items": {
            "type": "number",
            "format": "float",
            "x-nullable": false
          }
        },
        "principleTrend": {
          "type": "array",
          "description": "The principle trend of the group of time series.",
          "items": {
            "type": "number",
            "format": "float",
            "x-nullable": false
          }
        }
      }
    },
    "ChangePointDetectRequest": {
      "type": "object",
      "required": [
        "granularity",
        "series"
      ],
      "properties": {
        "series": {
          "type": "array",
          "description": "Time series data points. Points should be sorted by timestamp in ascending order to match the change point detection result.",
          "items": {
            "$ref": "#/definitions/Point"
          }
        },
        "granularity": {
          "$ref": "#/definitions/Granularity",
          "description": "Can only be one of yearly, monthly, weekly, daily, hourly or minutely. Granularity is used for verify whether input series is valid."
        },
        "customInterval": {
          "description": "Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}.",
          "$ref": "#/definitions/CustomInterval"
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically."
        },
        "stableTrendWindow": {
          "type": "integer",
          "format": "int32",
          "description": "Optional argument, advanced model parameter, a default stableTrendWindow will be used in detection."
        },
        "threshold": {
          "type": "number",
          "format": "float",
          "description": "Optional argument, advanced model parameter, between 0.0-1.0, the lower the value is, the larger the trend error will be which means less change point will be accepted."
        }
      }
    },
    "ChangePointDetectResponse": {
      "type": "object",
      "required": [
        "isChangePoint",
        "confidenceScores",
        "period"
      ],
      "properties": {
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "Frequency extracted from the series, zero means no recurrent pattern has been found."
        },
        "isChangePoint": {
          "type": "array",
          "description": "isChangePoint contains change point properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.",
          "items": {
            "type": "boolean",
            "x-nullable": false
          }
        },
        "confidenceScores": {
          "type": "array",
          "description": "the change point confidence of each point",
          "items": {
            "type": "number",
            "format": "float",
            "x-nullable": false
          }
        }
      }
    },
    "ChangePointDetectOnTimestampRequest": {
      "type": "object",
      "required": [
        "timestamp"
      ],
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of a data point."
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically."
        },
        "stableTrendWindow": {
          "type": "integer",
          "format": "int32",
          "description": "Optional argument, advanced model parameter, a default stableTrendWindow will be used in detection."
        },
        "threshold": {
          "type": "number",
          "format": "float",
          "description": "Optional argument, advanced model parameter, between 0.0-1.0, the lower the value is, the larger the trend error will be which means less change point will be accepted."
        }
      }
    },
    "ChangePointDetectOnTimestampResponse": {
      "type": "object",
      "required": [
        "isChangePoint",
        "confidenceScore",
        "period",
        "timestamp"
      ],
      "properties": {
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "Frequency extracted from the series, zero means no recurrent pattern has been found."
        },
        "isChangePoint": {
          "description": "Change point property. True means a change point has been detected.",
          "type": "boolean",
          "x-nullable": false
        },
        "confidenceScore": {
          "description": "The change point confidence score.",
          "type": "number",
          "format": "float",
          "x-nullable": false
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false,
          "description": "Timestamp of a data point (ISO8601 format)."
        }
      }
    },
    "TimeSeriesQueryRequest": {
      "type": "object",
      "required": [
        "begin",
        "end",
        "fields"
      ],
      "properties": {
        "begin": {
          "format": "date-time",
          "type": "string",
          "description": "Timestamp of begin time (ISO8601 format)."
        },
        "end": {
          "format": "date-time",
          "type": "string",
          "description": "Timestamp of end time (ISO8601 format)."
        },
        "fields": {
          "type": "array",
          "description": "Array of timeseries field.",
          "items": {
            "$ref": "#/definitions/TimeSeriesField",
            "x-nullable": false
          }
        }
      }
    },
    "TimeSeriesField": {
      "type": "string",
      "description": "An enum value indicating name of time series field.",
      "x-nullable": false,
      "x-ms-enum": {
        "name": "TimeSeriesField",
        "modelAsString": false
      },
      "enum": [
        "isAnomaly",
        "isChangePoint",
        "isPositiveAnomaly",
        "isNegativeAnomaly",
        "value",
        "expectedValue",
        "upperMargin",
        "lowerMargin",
        "period",
        "changePointConfidenceScore",
        "anomalyConfidenceScore"
      ]
    },
    "TimeSeriesQueryResponse": {
      "type": "object",
      "required": [
        "timestamps",
        "fieldValues"
      ],
      "properties": {
        "timestamps": {
          "description": "Timestamps of data points (ISO8601 format).",
          "type": "array",
          "items": {
            "format": "date-time",
            "type": "string",
            "x-nullable": false
          }
        },
        "fieldValues": {
          "description": "Values of queried timeseries field.",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      }
    },
    "AnomalyDetectOnTimestampRequest": {
      "type": "object",
      "required": [
        "timestamp"
      ],
      "properties": {
        "timestamp" : {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of a data point"
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically."
        },
        "maxAnomalyRatio": {
          "type": "number",
          "format": "float",
          "description": "Optional argument, advanced model parameter, max anomaly ratio in a time series."
        },
        "sensitivity": {
          "type": "integer",
          "format": "int32",
          "description": "Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted."
        }
      }
    },
    "AnomalyDetectOnTimestampResponse": {
      "type": "object",
      "required": [
        "timestamp",
        "value",
        "expectedValue",
        "isAnomaly",
        "isNegativeAnomaly",
        "isPositiveAnomaly",
        "lowerMargin",
        "upperMargin",
        "period",
        "confidenceScore"
      ],
      "properties": {
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "Frequency extracted from the series, zero means no recurrent pattern has been found."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of a point.",
          "format": "date-time",
          "x-nullable": false
        },
        "value": {
          "description": "Value of a point.",
          "type": "number",
          "format": "float",
          "x-nullable": false
        },
        "expectedValue": {
          "description": "ExpectedValue of a point on the timestamp.",
          "type": "number",
          "format": "float",
          "x-nullable": false
        },
        "upperMargin": {
          "description": "UpperMargin of a point on the timestamp. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side.",
          "type": "number",
          "format": "float",
          "x-nullable": false
        },
        "lowerMargin": {
          "description": "LowerMargin of a point on the timestamp. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal ones in client side.",
          "type": "number",
          "format": "float",
          "x-nullable": false
        },
        "isAnomaly": {
          "description": "Anomaly property of a point on the timestamp. True means an anomaly either negative or positive has been detected.",
          "type": "boolean",
          "x-nullable": false
        },
        "isNegativeAnomaly": {
          "description": "Anomaly status in negative direction on the timestamp. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one.",
          "type": "boolean",
          "x-nullable": false
        },
        "isPositiveAnomaly": {
          "description": "Anomaly status in positive direction on the timestamp. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one.",
          "type": "boolean",
          "x-nullable": false
        },
        "confidenceScore": {
          "description": "Confidence score of the anomaly, significant anomalies will get higher score.",
          "type": "number",
          "format": "float",
          "x-nullable": false
        }
      }
    },
    "LabelType": {
      "type": "string",
      "description": "Label type, can only be changePoint or Anomaly",
      "x-nullable": false,
      "x-ms-enum": {
        "name": "LabelType",
        "modelAsString": false
      },
      "enum": [
        "changePoint",
        "anomaly"
      ]
    },
    "LabelValue": {
      "type": "string",
      "description": "Value of a label, can be positiveAnomaly, negativeAnomaly, positiveChangePoint and negativeChangePoint",
      "x-nullable": false,
      "x-ms-enum": {
        "name": "LabelValue",
        "modelAsString": false
      },
      "enum": [
        "positiveAnomaly",
        "negativeAnomaly",
        "positiveChangePoint",
        "negativeChangePoint"
      ]
    },
    "LabelRequest": {
      "type": "object",
      "required": [
        "type",
        "begin",
        "end",
        "value"
      ],
      "properties": {
        "begin" : {
          "type": "string",
          "format": "date-time",
          "description": "begin of a detection time range"
        },
        "end" : {
          "type": "string",
          "format": "date-time",
          "description": "end of a detection time range"
        },
        "type": {
          "$ref": "#/definitions/LabelType"
        },
        "value": {
          "$ref": "#/definitions/LabelValue"
        }
      }
    }
  },
  "parameters": {
    "Endpoint": {
      "name": "Endpoint",
      "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    },
    "timeSeriesId": {
      "name": "timeSeriesId",
      "description": "Unique id for time series.",
      "x-ms-parameter-location": "method",
      "required": true,
      "type": "string",
      "in": "path",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "next": {
      "name": "next",
      "description": "Use \"next\" as query parameter to get next page data.",
      "x-ms-parameter-location": "method",
      "required": false,
      "type": "string",
      "in": "query"
    }
  }
}